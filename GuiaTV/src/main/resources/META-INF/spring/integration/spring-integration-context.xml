<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-file="http://www.springframework.org/schema/integration/file"
	xmlns:int-jpa="http://www.springframework.org/schema/integration/jpa"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/integration/jpa http://www.springframework.org/schema/integration/jpa/spring-integration-jpa-4.1.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-4.1.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">

	<!-- <import resource="classpath:/META-INF/spring/integration/hibernate-context.xml" 
		/> -->


	<!-- ******************************** SHARED CHANNELS ***************************************** -->

	<!-- **************************************** CATALOG REST CONTROLLER ***************************************** -->

	<!-- <beans profile="CatalogRestControllerTests, dev, default"> <import 
		resource="classpath:/WEB-INF/spring/root-context.xml" /> <import resource="classpath:/WEB-INF/spring/appServlet/servlet-context.xml" 
		/> <import resource="file:D:/GitHub/TFG_1/GuiaTV/src/main/webapp/WEB-INF/spring/root-context.xml"/> 
		<import resource="file:D:/GitHub/TFG_1/GuiaTV/src/main/webapp/WEB-INF/web.xml"/> 
		<bean id="catalogRestController" class="guiatv.catalog.restcontroller.CatalogRestController" 
		/> <mvc:annotation-driven> <mvc:message-converters register-defaults="true"> 
		<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"> 
		<property name="objectMapper" ref="myJacksonObjectMapper" /> </bean> </mvc:message-converters> 
		</mvc:annotation-driven> <bean id="myJacksonObjectMapper" class="com.fasterxml.jackson.databind.ObjectMapper" 
		/> <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"> 
		<property name="targetObject" ref="myJacksonObjectMapper" /> <property name="targetMethod" 
		value="configure" /> <property name="arguments"> <list> <value type="com.fasterxml.jackson.databind.DeserializationFeature">UNWRAP_SINGLE_VALUE_ARRAYS</value> 
		<value>true</value> </list> </property> </bean> </beans> -->


	<!-- **************************************** PERSISTENCE ***************************************** -->

	<beans
		profile="ScheduleLoaderTests, SchedulePollerTests, PersistenceTests, RtmpSpyingTests, CatalogRestControllerTests, dev, default">
		<!-- Antes -->
		<!-- <jdbc:embedded-database id="dataSource" type="H2" /> -->

		<!-- DespuÃ©s -->
		<bean id="dataSource"
			class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName" value="org.h2.Driver" />
			<property name="url"
				value="jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MVCC=true" />
			<property name="username" value="user" />
			<property name="password" value="user" />
		</bean>


		<!-- <jdbc:initialize-database data-source="dataSource" ignore-failures="DROPS"> 
			<jdbc:script location="classpath:/META-INF/SQL/H2-DropTables.sql" /> <jdbc:script 
			location="classpath:/META-INF/SQL/H2-CreateTables.sql" /> <jdbc:script location="classpath:/META-INF/SQL/H2-PopulateData.sql" 
			/> </jdbc:initialize-database> -->


		<!-- Define the JPA transaction manager -->
		<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
			<constructor-arg ref="entityManagerFactory" />
		</bean>


		<bean id="entityManagerFactory"
			class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
			<property name="dataSource" ref="dataSource" />
			<property name="jpaVendorAdapter" ref="vendorAdaptor" />
			<property name="packagesToScan" value="guiatv.persistence.domain" />
		</bean>

		<bean id="abstractVendorAdaptor" abstract="true">
			<property name="generateDdl" value="true" />
			<property name="database" value="H2" />
			<property name="showSql" value="false" />
		</bean>

		<bean id="entityManager"
			class="org.springframework.orm.jpa.support.SharedEntityManagerBean">
			<property name="entityManagerFactory" ref="entityManagerFactory" />
		</bean>

		<bean id="vendorAdaptor"
			class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
			parent="abstractVendorAdaptor">
		</bean>

		<!-- <mvc:annotation-driven /> -->
		<context:annotation-config />
		<tx:annotation-driven />
		<context:component-scan base-package="guiatv" />

	</beans>

	<!-- **************************************** GRABBER ***************************************** -->

	<beans profile="dev, default">
		<int:channel id="grabberChOut" fixed-subscriber="true" />

		<bean id="xmltvGrabber" class="guiatv.xmltv.grabber.XMLTVGrabber" />
		
		<!-- <int:transaction-synchronization-factory id="syncFactory">
	    <int:after-commit expression="payload.delete()" channel="nullChannel"/>
		</int:transaction-synchronization-factory> -->

		<int:inbound-channel-adapter ref="xmltvGrabber"
			method="doGrabbing" channel="grabberChOut" id="grabberInbound">
			<int:poller fixed-rate="30000" /> <!-- Cada 30 seg.  -->
			<!-- <int:poller max-messages-per-poll="1" cron="0 	*  *  *   *  ?  " /> -->
			<!-- <int:poller cron="0 	*  *  *   *  ?  ">
         		<int:transactional transaction-manager="transactionManager" synchronization-factory="syncFactory" />
   			 </int:poller> -->
			<!-- sec m h dm m dw -->
		</int:inbound-channel-adapter>
		
		
		<int-file:outbound-channel-adapter
			id="grabberOutbound" channel="grabberChOut" directory="file:xmltv_cap"
			auto-create-directory="true" mode="REPLACE" temporary-file-suffix=".writing">
		</int-file:outbound-channel-adapter>
	</beans>

	<!-- **************************************** GRABBER POLLER ***************************************** -->
	<beans profile="dev, default">

		<int:channel id="transformerChIn" fixed-subscriber="true" />

		<bean id="compositeFilter"
			class="org.springframework.integration.file.filters.CompositeFileListFilter">
			<constructor-arg>
				<list>
					<bean
						class="org.springframework.integration.file.filters.RegexPatternFileListFilter">
						<!-- <constructor-arg
							value="xmltvDump_[0-9][0-9][0-9][0-9]_[0-9][0-9]_[0-9][0-9]_[0-9][0-9]_[0-9][0-9]\.xml" /> -->
						<constructor-arg
							value="xmltvDump.xml" />
					</bean>
					<bean
						class="org.springframework.integration.file.filters.AcceptOnceFileListFilter" />
					<bean class="guiatv.xmltv.transformer.EntireFileFilter" />
				</list>
			</constructor-arg>
		</bean>

		<int-file:inbound-channel-adapter id="filePollerInbound"
			directory="file:xmltv_cap" channel="transformerChIn" auto-startup="true"
			filter="compositeFilter">
			<int:poller fixed-rate="25000" /> <!-- Cada 25 seg. -->
		</int-file:inbound-channel-adapter>
	</beans>
	<!-- **************************************** TRANSFORMER POLLER ***************************************** -->
	<beans profile="XMLTVTransformerTests, dev, default">

		<!-- <int:channel id="transformerChOut"/> -->

		<bean id="xmltvTransformerBean" class="guiatv.xmltv.transformer.XMLTVTransformer" />

		<int:transformer id="transformerXmlToPojo" ref="xmltvTransformerBean"
			input-channel="transformerChIn" method="transform" output-channel="transformerChOut" />

	</beans>

	<!-- ** TRANSFORMER -> SCHEDULE LOADER ** -->
	<beans profile="XMLTVTransformerTests, ScheduleLoaderTests, dev, default">
		<int:channel id="transformerChOut" />
	</beans>
	<!-- **************************************** SCHEDULE LOADER ***************************************** -->

	<beans profile="ScheduleLoaderTests, dev, default">
		<bean id="scheduleLoader" class="guiatv.schedule.loader.ScheduleLoader" />

		<int:outbound-channel-adapter id="scheduleLoaderOutbound"
			channel="transformerChOut" ref="scheduleLoader" method="loadListSchedules">
		</int:outbound-channel-adapter>
	</beans>


	<!-- **************************************** SCHEDULE POLLER ***************************************** -->
	<beans profile="SchedulePollerTests, dev, default">
		<!-- <int:channel id="eventPollerChOut" /> -->

		<bean id="schedPoller" class="guiatv.schedule.poller.SchedulePoller" />
		<!-- <bean id="eventPollerReply" class="guiatv.eventproducer.EventProducerPollerReply"/> -->

		<int:inbound-channel-adapter id="schedPollerInbound"
			ref="schedPoller" method="askForSchedules" channel="schedPollerChOut">
			<int:poller fixed-rate="5000" />
		</int:inbound-channel-adapter>
	</beans>

	<!-- ** DUMMY OUTBOUND (SchedulePollerTests) ** -->
	<beans profile="SchedulePollerTests">
		<bean id="schedPollerOutDummy" class="guiatv.schedule.poller.SchedulePollerOutDummy" />

		<int:outbound-channel-adapter id="schedPollerOutbound"
			channel="schedPollerChOut" ref="schedPollerOutDummy" method="receiveDummy">
			<int:poller fixed-rate="5000"></int:poller>
		</int:outbound-channel-adapter>
	</beans>

	<!-- <int:outbound-channel-adapter id="eventPollerOutbound" channel="eventPollerChOut" 
		ref="eventPollerReply" method="receive"> </int:outbound-channel-adapter> -->

	<!-- ** SCHEDULE POLLER -> SCHEDULE PUBLISHER ** -->
	<beans profile="SchedulePollerTests, SchedulePublisherTests, dev, default">
		<int:channel id="schedPollerChOut">
			<int:queue />
		</int:channel>
	</beans>
	<!-- **************************************** SCHEDULE PUBLISHER ***************************************** -->
	<beans profile="SchedulePublisherTests, dev, default">

		<bean id="jsonMessageConverter"
			class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter" />
		<!-- ** RABBITMQ ** -->
		<rabbit:connection-factory id="connectionFactory"
			host="localhost" virtual-host="/" username="user" password="userp"
			port="5672" />

		<rabbit:topic-exchange name="amq.topic"></rabbit:topic-exchange>

		<!-- <rabbit:template id="amqpTemplate" connection-factory="connectionFactory" 
			exchange="amq.topic" /> -->
		<rabbit:template id="amqpTemplate" connection-factory="connectionFactory"
			exchange="amq.topic" message-converter="jsonMessageConverter"
			encoding="UTF-8" />

		<rabbit:admin connection-factory="connectionFactory" />

		<!-- ** PUBLISHER ** -->

		<bean id="schedPublisher" class="guiatv.schedule.publisher.SchedulePublisher" />

		<int:outbound-channel-adapter id="schedPublisherOutbound"
			ref="schedPublisher" method="publishTopics" channel="schedPollerChOut">
			<int:poller fixed-rate="5000" />
		</int:outbound-channel-adapter>

	</beans>
	<!-- ******************************** REAL TIME EVENTS ***************************************** 
		*********************************************************************************************** -->


	<!-- ******************************** RTMP SPYING ***************************************** -->
	<beans profile="RtmpSpyingTests, dev, default">
		<int:channel id="rtmpSpierChOut" />

		<bean id="rtmpSpyingTaskExecutor"
			class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
			<property name="corePoolSize" value="5" />
			<property name="maxPoolSize" value="5" />
			<property name="queueCapacity" value="5" />
		</bean>

		<bean id="rtmpSpyingTask" class="guiatv.realtime.rtmpspying.RtmpSpyingTask"
			scope="prototype">
			<constructor-arg ref="rtmpSpyingTaskExecutor" />
		</bean>

	</beans>
	<!-- ** MOCK GATEWAY (RtmpSpyingTests) ** -->
	<!-- <beans profile="RtmpSpyingTests"> <int:outbound-channel-adapter channel="rtmpSpierChOut" 
		ref="rtmpSpyingOutputHandler" method="handleMessage" /> <bean id="rtmpSpyingOutputHandler" 
		class="org.mockito.Mockito" factory-method="mock"> <constructor-arg value="org.springframework.messaging.MessageHandler" 
		/> </bean> </beans> -->
	<!-- ******************************** CAPTURED FRAMES GATEWAY ***************************************** -->
	<beans profile="RtmpSpyingTests, CapturedFramesGatewayTests, dev, default">
		<int:gateway id="capturedFramesGateway"
			service-interface="guiatv.realtime.servicegateway.CapturedFramesGateway"
			default-request-timeout="5000" default-reply-timeout="5000">
			<int:method name="sendFrame" request-channel="sendFrameChOut" />
		</int:gateway>
	</beans>

	<!-- ** CAPTURED FRAMES SERVICE GATEWAY -> FRAME CUSTOM ROUTER ** -->
	<beans
		profile="RtmpSpyingTests, CapturedFramesGatewayTests, FrameCustomRouterTests, dev, default">
		<int:channel id="sendFrameChOut">
			<int:queue />
		</int:channel>
	</beans>

	<!-- ******************************** FRAME CUSTOM ROUTER ***************************************** -->
	<beans profile="FrameCustomRouterTests, dev, default">
		<int:bridge input-channel="classificationChBridgeIn"
			output-channel="classificationChIn" />
		<int:bridge input-channel="trainingChBridgeIn"
			output-channel="trainingChIn" />
		<int:channel id="classificationChIn">
			<int:queue />
		</int:channel>
		<int:channel id="trainingChIn">
			<int:queue />
		</int:channel>
		<bean id="customFrameRouter" class="guiatv.realtime.router.FrameCustomRouter" />
		<int:router id="frameRouter" input-channel="sendFrameChOut"
			ref="customFrameRouter" method="processFrame">
		</int:router>
	</beans>
	
	<!-- DUMMY CHANNEL (FrameCustomRouterTests) -->
	<beans profile="FrameCustomRouterTests">
		<int:channel id="sendFrameChOut">
		</int:channel>
	</beans>
	
	<beans profile="dev, default">
		<int:channel id="sendFrameChOut">
			<int:dispatcher task-executor="taskExecutor"
				load-balancer="round-robin" />
		</int:channel>
		<bean id="taskExecutor"
			class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
			<property name="corePoolSize" value="5" />
			<property name="maxPoolSize" value="10" />
			<property name="queueCapacity" value="25" />
		</bean>
		<bean id="classificationWorker" class="guiatv.realtime.classification.ClassificationWorker" />
		<bean id="trainingWorker" class="guiatv.realtime.training.TrainingWorker" />
		<int:channel id="classificationChIn">
			<int:dispatcher task-executor="taskExecutor"
				load-balancer="round-robin" />
		</int:channel>
		<int:channel id="trainingChIn">
			<int:dispatcher task-executor="taskExecutor"
				load-balancer="round-robin" />
		</int:channel>
		<int:outbound-channel-adapter id="classificationWorkerOutbound"
			channel="classificationChIn" ref="classificationWorker" method="classify" />
		<int:outbound-channel-adapter id="trainingWorkerOutbound"
			channel="trainingChIn" ref="trainingWorker" method="train" />
	</beans>

	<!-- ************************** MQTT CLIENT (ScheduleProducerTests) ************************************ -->
	<beans profile="SchedulePublisherTests">
		<bean id="mqttClientWorkerTaskExecutor"
			class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
			<property name="corePoolSize" value="2" />
			<property name="maxPoolSize" value="2" />
			<property name="queueCapacity" value="2" />
		</bean>
		<bean id="mqttClientWorker" class="guiatv.schedule.publisher.TaskExecutorMQTTClient"
			scope="prototype">
			<constructor-arg ref="mqttClientWorkerTaskExecutor" />
		</bean>
	</beans>


</beans>