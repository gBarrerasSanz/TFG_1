import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE")
    }
}

plugins {
	id 'java'
	id 'eclipse'
    id 'com.stehno.natives' version '0.2.1'
}

// Descomentar esta linea si se quiere descargar el javadoc ( Tarda mucho)
//eclipse.classpath.downloadJavadoc = true

// Soluciona el problema de las tildes y caracteres en UTF-8
tasks.withType(JavaCompile) {
  options.encoding = "iso-8859-1"
}

apply plugin: 'spring-boot'

repositories {
 	mavenCentral()
 	mavenLocal()
	maven { // Para eclipse paho MQTT
    	url "https://repo.eclipse.org/content/repositories/paho-releases/"
    }
    maven {
    	url "http://www.edwardraff.com/maven-repo/"
    }
    maven { // Repositorio local
    	// url 'C:/Users/Gabriel/.m2/repository' // ASUS 
    	url 'C:/Users/VAIO/.m2/repository' // VAIO
    }
    
    //maven { // Para una dependencia del plugin Trainable Segmentation
    //	url "http://maven.imagej.net/content/groups/public"
    //}
    //maven { // Para el plugin Trainable Segmentation
    //	url "http://maven.imagej.net/service/local/repositories/snapshots/content/"
    //}
}

// Para incluir OpenCV-2.4.9, seguir estos pasos:
// 	http://docs.opencv.org/doc/tutorials/introduction/java_eclipse/java_eclipse.html


ext {
	lwjglVersion = '2.9.2'
}


sourceSets {
	main {
    	java {
      		srcDir 'src/main/java'
    	}
    	resources {
      		srcDir 'src/main/resources'
    	}
	}
	
	// A los unit tests se les llama "test" a secas
	// para que utilicen la task por defecto del plugin java
	test {
    	java {
    	  	srcDir 'src/unit-test/java'
    	}
		resources {
     		srcDir 'src/unit-test/resources'
		}
	}
	
	integTest {
    	java {
    	  	srcDir 'src/integ-test/java'
    	}
		resources {
     		srcDir 'src/integ-test/resources'
		}
	}
}

task integTest(type: Test) {
    description = "Runs integration tests."
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
    jvmArgs = ['-Djava.library.path=./src/main/resources/META-INF/opencv-2.4.9/windows_bin/x64']
    //maxHeapSize = '1024m'
    // ensure we don't overwrite default report directories used by 'test' task
    reports.html.destination = "${project.buildDir}/reports/integTest"
    reports.junitXml.destination = "${project.buildDir}/integTest-results"
    binResultsDir = file("${project.buildDir}/integTest-results/binary/integTest")
    // always run integration tests after unit tests in order to fail fast
    mustRunAfter test
}


dependencies {
	compile 'org.springframework.boot:spring-boot-gradle-plugin:1.2.2.RELEASE'
	compile 'org.springframework.boot:spring-boot-starter:1.2.2.RELEASE'
	compile 'org.springframework.amqp:spring-rabbit:1.4.3.RELEASE'
	compile 'org.springframework.boot:spring-boot-starter-parent:1.2.5.RELEASE'
	
   	compile 'org.springframework:spring-core:4.1.6.RELEASE'
   	compile 'org.springframework:spring-context-support:4.1.6.RELEASE'
   	compile 'org.springframework.integration:spring-integration-core:4.1.4.RELEASE'
   	compile 'org.springframework:spring-beans:4.1.6.RELEASE'
   	
   	//compile 'org.springframework.integration:spring-integration-xml:4.1.2'
   	compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2' // it is only needed for testing purposes
    compile 'org.eclipse.persistence:javax.persistence:2.0.0'
    compile 'org.springframework.integration:spring-integration-jpa:4.1.2.RELEASE'
    compile 'log4j:log4j:1.2.17'
    compile 'org.hibernate:hibernate-entitymanager:4.2.11.Final' // con este funciona
    //compile 'org.hibernate:hibernate-entitymanager:4.3.8.Final' // con este no funciona
    compile 'org.springframework.integration:spring-integration-file:4.1.2.RELEASE'
    compile 'commons-jxpath:commons-jxpath:1.3'
    compile 'org.springframework:spring-test:4.1.5.RELEASE'
    compile 'com.h2database:h2:1.3.175'
    compile 'org.mockito:mockito-all:1.10.19'
    compile 'org.springframework.amqp:spring-amqp:1.4.5.RELEASE'
    compile 'com.fasterxml.jackson.core:jackson-core:2.3.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.3.2'
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    compile 'org.springframework:spring-messaging:4.1.3.RELEASE'
    compile 'org.springframework:spring-oxm:4.1.3.RELEASE'
    
    compile 'org.springframework:spring-web:4.1.7.RELEASE'
    
    compile "com.google.guava:guava:17.0"
    //compile('org.springframework.hateoas:spring-hateoas:0.17.0.RELEASE')
    //compile('org.springframework.hateoas:spring-hateoas:0.18.0.AFFORDANCES-SNAPSHOT')
    compile('org.springframework.hateoas:spring-hateoas:0.18.0.BUILD-SNAPSHOT')
    
    //compile 'org.apache.velocity:velocity:1.7'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf:1.2.5.RELEASE'
    
    compile("org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE")
    compile('com.jayway.jsonpath:json-path:2.0.0')
    
    
    //compile 'sc.fiji:Trainable_Segmentation:2.2.2-SNAPSHOT'
    
    compile 'nz.ac.waikato.cms.weka:weka-stable:3.6.12'
    compile 'com.edwardraff:JSAT:0.0.2'
    
    compile 'org.springframework.boot:spring-boot-starter-web:1.2.3.RELEASE'
    //compile 'commons-io:commons-io:2.4'
 	
 	
 	// El jar de OpenCV-2.4.9: http://stackoverflow.com/questions/12576413/including-local-jar-file-in-project-at-build-time-using-gradle
 	 compile files('./src/main/resources/META-INF/opencv-2.4.9/jar/opencv-249.jar')  	
 	 
 	// Sacado de aqui: https://github.com/tlrasor/Gradle-Lwjgl2-Template/blob/master/build.gradle
 	compile 'org.lwjgl.lwjgl:lwjgl:2.9.2'
 	
 	// Para los tests (Unit)
    testCompile 'junit:junit:4.10'
    
    // jpa
    compile 'org.springframework.data:spring-data-jpa:1.8.0.RELEASE'
    
    // JPA con Spring Boot
    //compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.2.3.RELEASE'
    
    compile 'org.aspectj:aspectjweaver:1.8.5'
    
    // Para los integration tests
	integTestCompile sourceSets.main.output
    integTestCompile sourceSets.test.output
    integTestCompile configurations.compile
    integTestCompile configurations.testCompile
    integTestRuntime configurations.runtime
    integTestRuntime configurations.testRuntime   
}



natives {
    def os = getOs()
    //println "Unpacking natives for $os to ./build/natives/$os"
    jars = [ 
        "lwjgl-platform-$lwjglVersion-natives-osx",
        "lwjgl-platform-$lwjglVersion-natives-windows",
        "lwjgl-platform-$lwjglVersion-natives-linux" ]
    platforms = "$os"
}

def getOs() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return 'windows_bin'
    }
    if (Os.isFamily(Os.FAMILY_MAC)) {
        return 'osx'
    }
    if (Os.isFamily(Os.FAMILY_UNIX))
        return 'linux' //this is not really all that correct
    throw new GradleException('Your OS does not seem to be supported')
}

// Hace que funcione "gradle build", "gradle test"
test {
	jvmArgs = ['-Djava.library.path=./src/main/resources/META-INF/opencv-2.4.9/windows_bin/x64']
}

// Hace que funcione "gradle run"
run {
    jvmArgs = ['-Djava.library.path=./src/main/resources/META-INF/opencv-2.4.9/windows_bin/x64']
}


/*
// Esto también funciona
tasks.withType(JavaExec) { JavaExec t ->
    t.jvmArgs = ['-Djava.library.path=./src/main/resources/META-INF/opencv-2.4.9/windows_bin/x64']
}
*/

// Para solucionar el error: SLF4J: Class path contains multiple SLF4J bindings.
configurations.all {
    exclude module: 'slf4j-log4j12'
}

task checkOs  {
  println "Operating System: ${getOs()}"
}
